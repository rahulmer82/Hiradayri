{"ast":null,"code":"var _jsxFileName = \"D:\\\\React tools\\\\Hiradayri\\\\hiradayri\\\\src\\\\Component\\\\Context\\\\MtUpdate.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport MtContext from './Mtcontext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MtUpdate(props) {\n  _s();\n  const mydata = [];\n  // main state this to update Clint data;\n  const [Note, setNote] = useState(mydata);\n  //fetch data\n  const Getnotes = async () => {\n    let data = await fetch(`http://localhost:5000/api/data/mydata`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'usertoken': localStorage.getItem('token')\n      }\n    });\n    const json = await data.json();\n    setNote(json);\n  };\n\n  // Add Data to help This Api\n\n  const AddNote = async (price, work) => {\n    const responce = await fetch(`http://localhost:5000/api/data/addwork`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'Application/json',\n        'usertoken': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        price,\n        work\n      })\n    });\n    const json = await responce.json();\n    setNote(Note.concat(json));\n  };\n\n  // edit note using api calls;\n\n  const EditNote = async (id, price, date, work, dailywork) => {\n    const responce = await fetch(`http://localhost:5000/api/data/update/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'Application/json',\n        'usertoken': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        price,\n        work,\n        date\n      })\n    });\n    const json = await responce.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(Note));\n    // Logic to edit in client\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].price = price;\n        newNotes[index].work = work;\n        newNotes[index].date = date;\n        newNotes[index].dailywork = dailywork;\n        break;\n      }\n    }\n    setNote(newNotes);\n  };\n\n  // Delete Notes using API calls;\n  const DeleteNote = async id => {\n    const response = await fetch(`http://localhost:5000/api/data/delete/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'Application/json',\n        'usertoken': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    const Newnote = Note.filter(note => {\n      return note._id !== id;\n    });\n    setNote(Newnote);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MtContext.Provider, {\n      value: {\n        Note,\n        Getnotes,\n        DeleteNote,\n        AddNote,\n        EditNote\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(MtUpdate, \"tz9/4wNDZ9LUAEJh7/x89Yf6+eQ=\");\n_c = MtUpdate;\nexport default MtUpdate;\nvar _c;\n$RefreshReg$(_c, \"MtUpdate\");","map":{"version":3,"names":["React","MtContext","jsxDEV","_jsxDEV","MtUpdate","props","_s","mydata","Note","setNote","useState","Getnotes","data","fetch","method","headers","localStorage","getItem","json","AddNote","price","work","responce","body","JSON","stringify","concat","EditNote","id","date","dailywork","console","log","newNotes","parse","index","length","element","_id","DeleteNote","response","Newnote","filter","note","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React tools/Hiradayri/hiradayri/src/Component/Context/MtUpdate.js"],"sourcesContent":["import React from 'react'\r\nimport MtContext from './Mtcontext'\r\nfunction MtUpdate(props) {\r\n    const mydata=[]\r\n    // main state this to update Clint data;\r\n    const [Note,setNote]=useState(mydata)\r\n    //fetch data\r\n    const Getnotes= async()=>{\r\n        let data= await fetch(`http://localhost:5000/api/data/mydata`,{\r\n            method:'GET',\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'usertoken':localStorage.getItem('token')\r\n            }\r\n        });\r\n        const json=await data.json()\r\n        setNote(json)\r\n    };\r\n\r\n    // Add Data to help This Api\r\n\r\n    const AddNote=async(price,work)=>{\r\nconst responce=await fetch(`http://localhost:5000/api/data/addwork`,{\r\n    method:'POST',\r\n    headers:{\r\n        'Content-type':'Application/json',\r\n        'usertoken':localStorage.getItem('token')\r\n    },\r\n    body: JSON.stringify({price,work})\r\n});\r\nconst json= await responce.json()\r\nsetNote(Note.concat(json))\r\n    };\r\n\r\n    // edit note using api calls;\r\n\r\n    const EditNote=async (id,price,date,work,dailywork)=>{\r\nconst responce=await fetch(`http://localhost:5000/api/data/update/${id}`,{\r\n    method:'PUT',\r\n    headers:{\r\n        'Content-type':'Application/json',\r\n        'usertoken': localStorage.getItem('token')\r\n    },\r\n    body: JSON.stringify({price,work,date})\r\n});\r\nconst json=await responce.json()\r\nconsole.log(json)\r\nlet newNotes = JSON.parse(JSON.stringify(Note))\r\n// Logic to edit in client\r\nfor (let index = 0; index < newNotes.length; index++) {\r\n  const element = newNotes[index];\r\n  if (element._id === id) {\r\n    newNotes[index].price = price;\r\n    newNotes[index].work =work;\r\n    newNotes[index].date= date; \r\n    newNotes[index].dailywork=dailywork\r\n    break; \r\n  }\r\n} \r\nsetNote(newNotes)\r\n    }\r\n    \r\n\r\n  // Delete Notes using API calls;\r\n  const DeleteNote=async(id)=>{\r\nconst response=await fetch(`http://localhost:5000/api/data/delete/${id}`,{\r\n    method:'DELETE',\r\n    headers:{\r\n        'Content-type':'Application/json',\r\n        'usertoken':localStorage.getItem('token')\r\n    }\r\n})\r\nconst json=await response.json();\r\nconst Newnote= Note.filter((note)=>{return note._id !==id})\r\nsetNote(Newnote)\r\n  }  \r\n  return (\r\n    <div>\r\n      <MtContext.Provider value={{Note,Getnotes,DeleteNote,AddNote,EditNote}}>\r\n        {props.children}\r\n      </MtContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MtUpdate\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}