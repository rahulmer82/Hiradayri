{"ast":null,"code":"import{useState}from\"react\";import mycontext from\"./Createcontext\";import{jsx as _jsx}from\"react/jsx-runtime\";const Newdata=props=>{//https://tasktally-server.onrender.com/`\nconst mydata=[];const host=window.location.origin;// main state this to update Clint data;\nconst[Note,setNote]=useState(mydata);//fetch data\nconst Getnotes=async()=>{let data=await fetch(\"\".concat(host,\"/api/data/mydata\"),{method:'GET',headers:{'Content-Type':'application/json','usertoken':localStorage.getItem('token')}});const json=await data.json();setNote(json);};// Add Data to help This Api\nconst AddNote=async(price,work)=>{const responce=await fetch(\"\".concat(host,\"/api/data/addwork\"),{method:'POST',headers:{'Content-type':'Application/json','usertoken':localStorage.getItem('token')},body:JSON.stringify({price,work})});const json=await responce.json();setNote(Note.concat(json));};// edit note using api calls;\nconst EditNote=async(id,price,date,work,dailywork)=>{const responce=await fetch(\"\".concat(host,\"/api/data/update/\").concat(id),{method:'PUT',headers:{'Content-type':'Application/json','usertoken':localStorage.getItem('token')},body:JSON.stringify({price,work,date})});const json=await responce.json();console.log(json);let newNotes=JSON.parse(JSON.stringify(Note));// Logic to edit in client\nfor(let index=0;index<newNotes.length;index++){const element=newNotes[index];if(element._id===id){newNotes[index].price=price;newNotes[index].work=work;newNotes[index].date=date;newNotes[index].dailywork=dailywork;break;}}setNote(newNotes);};// Delete Notes using API calls;\nconst DeleteNote=async id=>{const response=await fetch(\"\".concat(host,\"/api/data/delete/\").concat(id),{method:'DELETE',headers:{'Content-type':'Application/json','usertoken':localStorage.getItem('token')}});const json=await response.json();const Newnote=Note.filter(note=>{return note._id!==id;});setNote(Newnote);};return/*#__PURE__*/_jsx(mycontext.Provider,{value:{Note,Getnotes,DeleteNote,AddNote,EditNote},children:props.children});};export default Newdata;","map":{"version":3,"names":["useState","mycontext","jsx","_jsx","Newdata","props","mydata","host","window","location","origin","Note","setNote","Getnotes","data","fetch","concat","method","headers","localStorage","getItem","json","AddNote","price","work","responce","body","JSON","stringify","EditNote","id","date","dailywork","console","log","newNotes","parse","index","length","element","_id","DeleteNote","response","Newnote","filter","note","Provider","value","children"],"sources":["D:/React tools/Hiradayri/hiradayri/client/src/Component/Context/Updatecontext.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport mycontext from \"./Createcontext\";\r\n\r\nconst Newdata=(props)=>{\r\n\r\n    //https://tasktally-server.onrender.com/`\r\n    const mydata=[]\r\n    const host=window.location.origin\r\n    // main state this to update Clint data;\r\n    const [Note,setNote]=useState(mydata)\r\n    //fetch data\r\n    const Getnotes= async()=>{\r\n        let data= await fetch(`${host}/api/data/mydata`,{\r\n            method:'GET',\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'usertoken':localStorage.getItem('token')\r\n            }\r\n        });\r\n        const json=await data.json()\r\n        setNote(json)\r\n    };\r\n\r\n    // Add Data to help This Api\r\n\r\n    const AddNote=async(price,work)=>{\r\nconst responce=await fetch(`${host}/api/data/addwork`,{\r\n    method:'POST',\r\n    headers:{\r\n        'Content-type':'Application/json',\r\n        'usertoken':localStorage.getItem('token')\r\n    },\r\n    body: JSON.stringify({price,work})\r\n});\r\nconst json= await responce.json()\r\nsetNote(Note.concat(json))\r\n    };\r\n\r\n    // edit note using api calls;\r\n\r\n    const EditNote=async (id,price,date,work,dailywork)=>{\r\nconst responce=await fetch(`${host}/api/data/update/${id}`,{\r\n    method:'PUT',\r\n    headers:{\r\n        'Content-type':'Application/json',\r\n        'usertoken': localStorage.getItem('token')\r\n    },\r\n    body: JSON.stringify({price,work,date})\r\n});\r\nconst json=await responce.json()\r\nconsole.log(json)\r\nlet newNotes = JSON.parse(JSON.stringify(Note))\r\n// Logic to edit in client\r\nfor (let index = 0; index < newNotes.length; index++) {\r\n  const element = newNotes[index];\r\n  if (element._id === id) {\r\n    newNotes[index].price = price;\r\n    newNotes[index].work =work;\r\n    newNotes[index].date= date; \r\n    newNotes[index].dailywork=dailywork\r\n    break; \r\n  }\r\n} \r\nsetNote(newNotes)\r\n    }\r\n    \r\n\r\n  // Delete Notes using API calls;\r\n  const DeleteNote=async(id)=>{\r\nconst response=await fetch(`${host}/api/data/delete/${id}`,{\r\n    method:'DELETE',\r\n    headers:{\r\n        'Content-type':'Application/json',\r\n        'usertoken':localStorage.getItem('token')\r\n    }\r\n})\r\nconst json=await response.json();\r\nconst Newnote= Note.filter((note)=>{return note._id !==id})\r\nsetNote(Newnote)\r\n  }  \r\nreturn (\r\n<mycontext.Provider value={{Note,Getnotes,DeleteNote,AddNote,EditNote}} >\r\n    {props.children}\r\n</mycontext.Provider>\r\n);\r\n}\r\n\r\nexport default Newdata;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}